/*!
 * # Semantic UI - Grid
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

/*******************************
            Theme
*******************************/

@type    : 'collection';
@element : 'grid';

@import (multiple) '../../theme.config';

/*******************************
            Standard
*******************************/

.ui.grid {
  display: block;
  text-align: left;

  font-size: 0em;
  padding: 0em;
}

.ui.grid:after,
.ui.grid > .row:after {
  content: '';
  display: block;
  height: 0px;
  clear: both;
  visibility: hidden;
}

/*----------------------
      Remove Gutters
-----------------------*/

.ui.grid {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  margin-left: -(@gutterWidth / 2);
  margin-right: -(@gutterWidth / 2);
}
.ui.relaxed.grid  {
  margin-left: -(@relaxedGutterWidth / 2);
  margin-right: -(@relaxedGutterWidth / 2);
}
.ui[class*="very relaxed"].grid  {
  margin-left: -(@veryRelaxedGutterWidth / 2);
  margin-right: -(@veryRelaxedGutterWidth / 2);
}


/* Collapse Margins on Consecutive Grids */
.ui.grid + .grid {
  margin-top: (@rowSpacing / 2);
}

/*-------------------
       Columns
--------------------*/

/* Standard 16 column */
.ui.grid > .column:not(.row),
.ui.grid > .row > .column {
  position: relative;
  display: inline-block;
  font-size: 1rem;

  .fractionWidth(1, @columnCount);
  padding-left: (@gutterWidth / 2);
  padding-right: (@gutterWidth / 2);
  vertical-align: top;
}

.ui.grid > * {
  padding-left: (@gutterWidth / 2);
  padding-right: (@gutterWidth / 2);
}

/*-------------------
        Rows
--------------------*/

.ui.grid > .row {
  position: relative;
  display: block;
  width: auto !important;
  padding: 0rem;
  font-size: 0rem;
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

/*-------------------
       Columns
--------------------*/

/* Vertical padding when no rows */
.ui.grid > .column:not(.row) {
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}
.ui.grid > .row > .column {
  margin-top: 0em;
  margin-bottom: 0em;
}

/*-------------------
      Content
--------------------*/

.ui.grid > .row > img,
.ui.grid > .row > .column > img {
  max-width: @columnMaxImageWidth;
}

/*-------------------
    Loose Coupling
--------------------*/

.ui.grid .row + .ui.divider {
  margin: (@rowSpacing / 2) (@gutterWidth / 2);
}

/* remove Border on last horizontal segment */
.ui.grid > .row > .column:last-child > .horizontal.segment,
.ui.grid > .column:last-child > .horizontal.segment {
  box-shadow: none;
}

/*******************************
           Variations
*******************************/


/*-----------------------
       Page Grid
-------------------------*/

.ui.page.grid {
  padding-left: @computerGutter;
  padding-right: @computerGutter;
  width: @computerWidth;
}

/* Collapse Margin */
.ui.grid > .ui.grid:first-child {
  margin-top: 0em;
}
.ui.grid > .ui.grid:last-child {
  margin-bottom: 0em;
}

@media only screen and (max-width: (@largestMobileScreen)) {
  .ui.page.grid {
    width: @mobileWidth;
    padding-left: @mobileGutter;
    padding-right: @mobileGutter;
    margin-left: 0em;
    margin-right: 0em;
  }
}
@media only screen and (min-width: @tabletBreakpoint ) {
  .ui.page.grid {
    width: @tabletWidth;
    margin-left: @tabletMargin;
    margin-right: @tabletMargin;
    padding-left: @tabletGutter;
    padding-right: @tabletGutter;
  }
}
@media only screen and (min-width: @computerBreakpoint) {
  .ui.page.grid {
    width: @computerWidth;
    margin-left: @computerMargin;
    margin-right: @computerMargin;
    padding-left: @computerGutter;
    padding-right: @computerGutter;
  }
}
@media only screen and (min-width: @largeMonitorBreakpoint) {
  .ui.page.grid {
    width: @largeMonitorWidth;
    margin-left: @largeMonitorMargin;
    margin-right: @largeMonitorMargin;
    padding-left: @largeMonitorGutter;
    padding-right: @largeMonitorGutter;
  }
}
@media only screen and (min-width: @widescreenMonitorBreakpoint) {
  .ui.page.grid {
    width: @widescreenMonitorWidth;
    margin-left: @widescreenMargin;
    margin-right: @widescreenMargin;
    padding-left: @widescreenMonitorGutter;
    padding-right: @widescreenMonitorGutter;
  }
}


/*-------------------
     Column Count
--------------------*/

/* Assume full width with one column */
.ui.grid > .column:only-child,
.ui.grid > .row > .column:only-child {
  .fractionWidth(1, 1);
}

/* Generate single column widths for all grid/row fractions (up to @columnCount) */
&{.forCols(); .-each(@name, @i) {
  .ui[class*="@{name} column"].grid > .row > .column,
  .ui[class*="@{name} column"].grid > .column {
    .-nColumn;
  }
}}

/* Row Based Overrides */
&{.forCols(); .-each(@name, @i) {
  .ui.grid > [class*="@{name} column"].row > .column {
    .-nColumn !important;
  }
}}

/*-------------------
    Column Width
--------------------*/

/* Sizing Combinations */
&{.forCols(); .-each(@name, @i) {
  .ui.grid {
    & > .row > [class*="@{num} wide"].column,
    & > .column.row > [class*="@{num} wide"].column,
    & > [class*="@{num} wide"].column,
    &.column > [class*="@{num} wide"].column {
      .-nWide !important;
    }
  }
}}

/* Column span permutations for non-standard grids/rows */
&{.forColSpanPermutations(); .-each(@num, @n, @divider, @d) {
  .ui.grid > [class*="@{divider} column"].row > [class*="@{num} wide"].column,
  .ui[class*="@{divider} column"].grid > [class*="@{num} wide"].column {
    .-width !important;
  }
}}


/*----------------------
    Width per Device
-----------------------*/

/* Mobile Sizing Combinations */
@media only screen and (min-width: @mobileBreakpoint) and (max-width: @largestMobileScreen) {
  .forCols(); .-each(@name, @i) {
    .ui.grid > .row > [class*="@{name} wide mobile"].column,
    .ui.grid > .column.row > [class*="@{name} wide mobile"].column,
    .ui.grid > [class*="@{name} wide mobile"].column,
    .ui.column.grid > [class*="@{name} wide mobile"].column {
      .-nWide !important;
    }  
  }
}

/* Tablet Sizing Combinations */
@media only screen and (min-width: @tabletBreakpoint) and (max-width: @largestTabletScreen) {
  .forCols(); .-each(@name, @i) {
    .ui.grid > .row > [class*="@{name} wide tablet"].column,
    .ui.grid > .column.row > [class*="@{name} wide tablet"].column,
    .ui.grid > [class*="@{name} wide tablet"].column,
    .ui.column.grid > [class*="@{name} wide tablet"].column {
      .-nWide !important;
    }  
  }
}

/* Computer/Desktop Sizing Combinations */
@media only screen and (min-width: @computerBreakpoint) {
  .forCols(); .-each(@name, @i) {
    .ui.grid > .row > [class*="@{name} wide computer"].column,
    .ui.grid > .column.row > [class*="@{name} wide computer"].column,
    .ui.grid > [class*="@{name} wide computer"].column,
    .ui.column.grid > [class*="@{name} wide computer"].column {
      .-nWide !important;
    }  
  }
}

/* Large Monitor Sizing Combinations */
@media only screen and (min-width: @largeMonitorBreakpoint) and (max-width: @largestLargeMonitor){
  .forCols(); .-each(@name, @i) {
    .ui.grid > .row > [class*="@{name} wide large screen"].column,
    .ui.grid > .column.row > [class*="@{name} wide large screen"].column,
    .ui.grid > [class*="@{name} wide large screen"].column,
    .ui.column.grid > [class*="@{name} wide large screen"].column {
      .-nWide !important;
    }  
  }
}

/* Widescreen Sizing Combinations */
@media only screen and (min-width: @widescreenMonitorBreakpoint) {
  .forCols(); .-each(@name, @i) {
    .ui.grid > .row > [class*="@{name} wide widescreen"].column,
    .ui.grid > .column.row > [class*="@{name} wide widescreen"].column,
    .ui.grid > [class*="@{name} wide widescreen"].column,
    .ui.column.grid > [class*="@{name} wide widescreen"].column {
      .-nWide !important;
    }  
  }
}

/*----------------------
        Centered
-----------------------*/

.ui.centered.grid,
.ui.centered.grid > .row,
.ui.grid > .centered.row {
  text-align: center;
  justify-content: center;
}
.ui.centered.grid > .column:not(.aligned):not(.row),
.ui.centered.grid > .row > .column:not(.aligned),
.ui.grid .centered.row > .column:not(.aligned) {
  text-align: left;
}

.ui.grid > .centered.column,
.ui.grid > .row > .centered.column {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/*----------------------
        Relaxed
-----------------------*/

.ui.relaxed.grid > .column:not(.row),
.ui.relaxed.grid > .row > .column,
.ui.grid > .relaxed.row > .column {
  padding-left: (@relaxedGutterWidth / 2);
  padding-right: (@relaxedGutterWidth / 2);
}

.ui[class*="very relaxed"].grid > .column:not(.row),
.ui[class*="very relaxed"].grid > .row > .column,
.ui.grid > [class*="very relaxed"].row > .column {
  padding-left: (@veryRelaxedGutterWidth / 2);
  padding-right: (@veryRelaxedGutterWidth / 2);
}

/* Coupling with UI Divider */
.ui.relaxed.grid .row + .ui.divider,
.ui.grid .relaxed.row + .ui.divider {
  margin-left: (@relaxedGutterWidth / 2);
  margin-right: (@relaxedGutterWidth / 2);
}
.ui[class*="very relaxed"].grid .row + .ui.divider,
.ui.grid [class*="very relaxed"].row + .ui.divider {
  margin-left: (@veryRelaxedGutterWidth / 2);
  margin-right: (@veryRelaxedGutterWidth / 2);
}


/*----------------------
        Padded
-----------------------*/

.ui.padded.grid:not(.vertically):not(.horizontally) {
  margin: 0em !important;
}
[class*="horizontally padded"].ui.grid {
  margin-left: 0em !important;
  margin-right: 0em !important;
}
[class*="vertically padded"].ui.grid {
  margin-top: 0em !important;
  margin-bottom: 0em !important;
}

/*----------------------
       "Floated"
-----------------------*/

.ui.grid [class*="left floated"].column {
  float: left;
}
.ui.grid [class*="right floated"].column {
  float: right;
}


/*----------------------
        Divided
-----------------------*/

.ui.divided.grid:not([class*="vertically divided"]) > .column:not(.row),
.ui.divided.grid:not([class*="vertically divided"]) > .row > .column {
  box-shadow: @dividedBorder;
}

/* Swap from padding to margin on columns to have dividers align */
.ui[class*="vertically divided"].grid > .column:not(.row),
.ui[class*="vertically divided"].grid > .row > .column {
  margin-top: (@rowSpacing / 2);
  margin-bottom: (@rowSpacing / 2);
  padding-top: 0rem;
  padding-bottom: 0rem;
}
.ui[class*="vertically divided"].grid > .row {
  margin-top: 0em;
  margin-bottom: 0em;
  padding-top: 0em;
  padding-bottom: 0em;
}

/* No divider on first column on row */
.ui.divided.grid:not([class*="vertically divided"]) > .column:first-child,
.ui.divided.grid:not([class*="vertically divided"]) > .row > .column:first-child {
  box-shadow: none;
}

/* Divided Row */
.ui.grid > .divided.row > .column {
  box-shadow: @dividedBorder;
}
.ui.grid > .divided.row > .column:first-child {
  box-shadow: none;
}

/* Vertically Divided */
.ui[class*="vertically divided"].grid > .row {
  position: relative;
}
.ui[class*="vertically divided"].grid > .row:before {
  position: absolute;
  content: "";
  top: 0em;
  left: 0px;

  width: ~"calc(100% - "@gutterWidth~")";
  height: 1px;

  margin: 0% (@gutterWidth / 2);
  box-shadow: @verticallyDividedBorder;
}

/* Padded Horizontally Divided */
[class*="horizontally padded"].ui.divided.grid,
.ui.padded.divided.grid:not(.vertically):not(.horizontally) {
  width: 100%;
}

/* First Row Vertically Divided */
.ui[class*="vertically divided"].grid > .row:first-child:before {
  box-shadow: none;
}

/* Inverted Divided */
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .column:not(.row),
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .row > .column {
  box-shadow: @dividedInvertedBorder;
}
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .column:not(.row):first-child,
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .row > .column:first-child {
  box-shadow: none;
}
.ui.inverted[class*="vertically divided"].grid > .row:before {
  box-shadow: @verticallyDividedInvertedBorder;
}

/* Relaxed */
.ui.relaxed[class*="vertically divided"].grid > .row:before {
  margin-left: (@relaxedGutterWidth / 2);
  margin-right: (@relaxedGutterWidth / 2);
  width: ~"calc(100% - "@relaxedGutterWidth~")";
}
.ui[class*="very relaxed"][class*="vertically divided"].grid > .row:before {
  margin-left: @veryRelaxedGutterWidth;
  margin-right: @veryRelaxedGutterWidth;
  width: ~"calc(100% - "@veryRelaxedGutterWidth~")";
}

/*----------------------
         Celled
-----------------------*/

.ui.celled.grid {
  display: table;
  table-layout: fixed;
  width: 100%;
  margin: @celledMargin;
  box-shadow: 0px 0px 0px @celledWidth @celledBorderColor;
}
.ui.celled.grid > .row,
.ui.celled.grid > .column.row,
.ui.celled.grid > .column.row:first-child {
  display: table;
  table-layout: fixed;
  width: 100% !important;
  margin: 0em;
  padding: 0em;
  box-shadow: 0px (-@celledWidth) 0px 0px @celledBorderColor;
}
.ui.celled.grid > .column:not(.row),
.ui.celled.grid > .row > .column {
  display: table-cell;
  box-shadow: (-@celledWidth) 0px 0px 0px @celledBorderColor;
}
.ui.celled.grid > .column:first-child,
.ui.celled.grid > .row > .column:first-child {
  box-shadow: none;
}
.ui.celled.page.grid {
  box-shadow: none;
}

.ui.celled.grid > .column:not(.row),
.ui.celled.grid > .row > .column {
  padding: @celledPadding;
}
.ui.relaxed.celled.grid > .column:not(.row),
.ui.relaxed.celled.grid > .row > .column {
  padding: @celledRelaxedPadding;
}
.ui[class*="very relaxed"].celled.grid > .column:not(.row),
.ui[class*="very relaxed"].celled.grid > .row > .column {
  padding: @celledVeryRelaxedPadding;
}

/* Internally Celled */
.ui[class*="internally celled"].grid {
  box-shadow: none;
}
.ui[class*="internally celled"].grid > .row:first-child {
  box-shadow: none;
}
.ui[class*="internally celled"].grid > .row > .column:first-child {
  box-shadow: none;
}

/*----------------------
  Horizontally Centered
-----------------------*/

/* Left Aligned */
.ui[class*="left aligned"].grid,
.ui[class*="left aligned"].grid > .row > .column,
.ui[class*="left aligned"].grid > .column,
.ui.grid [class*="left aligned"].column,
.ui.grid > [class*="left aligned"].row > .column {
  text-align: left;
  align-items: flex-start !important;
}
.ui.grid [class*="left aligned"].column{
  text-align: left !important;
}

/* Center Aligned */
.ui[class*="center aligned"].grid,
.ui[class*="center aligned"].grid > .row > .column,
.ui[class*="center aligned"].grid > .column,
.ui.grid > [class*="center aligned"].row > .column {
  text-align: center;
  align-items: center !important;
}
.ui.grid [class*="center aligned"].column{
  text-align: center !important;
}

/* Right Aligned */
.ui[class*="right aligned"].grid,
.ui[class*="right aligned"].grid > .row > .column,
.ui[class*="right aligned"].grid > .column,
.ui.grid > [class*="right aligned"].row > .column {
  text-align: right;
  align-items: flex-end !important;
}
.ui.grid [class*="right aligned"].column{
  text-align: right !important;
}

/* Justified */
.ui.justified.grid,
.ui.justified.grid > .row > .column,
.ui.justified.grid > .column,
.ui.grid .justified.column,
.ui.grid > .justified.row > .column {
  text-align: justify;
  hyphens: auto;
}
.ui.grid .justified.column {
  text-align: justify !important;
  hyphens: auto !important;
}

/*----------------------
   Vertically Aligned
-----------------------*/

/* Top Aligned */
.ui[class*="top aligned"].grid,
.ui[class*="top aligned"].grid > .row > .column,
.ui[class*="top aligned"].grid > .column,
.ui.grid [class*="top aligned"].column,
.ui.grid > [class*="top aligned"].row > .column {
  vertical-align: top;
  justify-content: flex-start !important;
}
.ui.grid [class*="top aligned"].column {
  vertical-align: top !important;
  justify-content: flex-start !important;
}

.ui.stretched.grid > .row > .column,
.ui.stretched.grid > .column:not(.row),
.ui.grid .stretched.column,
.ui.grid > .stretched.row > .column {
  display: flex !important;
  flex-direction: column;
}
.ui.stretched.grid > .row > .column > *,
.ui.stretched.grid > .column > *,
.ui.grid .stretched.column > *,
.ui.grid > .stretched.row > .column > * {
  flex-grow: 1;
}

/* Middle Aligned */
.ui[class*="middle aligned"].grid,
.ui[class*="middle aligned"].grid > .row > .column,
.ui[class*="middle aligned"].grid > .column,
.ui.grid > [class*="middle aligned"].row > .column {
  vertical-align: middle;
  justify-content: center !important;
}
.ui.grid [class*="middle aligned"].column{
  vertical-align: middle !important;
  justify-content: center !important;
}

/* Bottom Aligned */
.ui[class*="bottom aligned"].grid,
.ui[class*="bottom aligned"].grid > .row > .column,
.ui[class*="bottom aligned"].grid > .column,
.ui.grid > [class*="bottom aligned"].row > .column {
  vertical-align: bottom;
  justify-content: flex-end !important;
}
.ui.grid [class*="bottom aligned"].column {
  justify-content: flex-end !important;
  vertical-align: bottom !important;
}

/*----------------------
         Colored
-----------------------*/

.ui.grid > .white.row,
.ui.grid > .row > .white.column {
  background-color: @white !important;
  color: @textColor;
}
.ui.grid > .row > .white.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .black.row,
.ui.grid > .row > .black.column {
  background-color: @black !important;
  color: @white;
}
.ui.grid > .row > .black.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .blue.row,
.ui.grid > .row > .blue.column {
  background-color: @blue !important;
  color: @white;
}
.ui.grid > .row > .blue.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .green.row,
.ui.grid > .row > .green.column {
  background-color: @green !important;
  color: @white;
}
.ui.grid > .row > .green.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .orange.row,
.ui.grid > .row > .orange.column {
  background-color: @orange !important;
  color: @white;
}
.ui.grid > .row > .orange.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .pink.row,
.ui.grid .pink.column {
  background-color: @pink !important;
  color: @white;
}
.ui.grid > .row > .pink.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .purple.row,
.ui.grid > .row > .purple.column {
  background-color: @purple !important;
  color: @white;
}
.ui.grid > .row > .purple.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .red.row,
.ui.grid > .row > .red.column {
  background-color: @red !important;
  color: @white;
}
.ui.grid > .row > .red.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .teal.row,
.ui.grid > .row > .teal.column {
  background-color: @teal !important;
  color: @white;
}
.ui.grid > .row > .teal.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

.ui.grid > .yellow.row,
.ui.grid > .row > .yellow.column {
  background-color: @yellow !important;
  color: @white;
}
.ui.grid > .row > .yellow.column {
  margin-top: -(@rowSpacing / 2);
  margin-bottom: -(@rowSpacing / 2);
  padding-top: (@rowSpacing / 2);
  padding-bottom: (@rowSpacing / 2);
}

/*----------------------
      Equal Width
-----------------------*/

.ui[class*="equal width"].grid {
  display: table;
  table-layout: fixed;
}
.ui[class*="equal width"].grid > .row,
.ui.grid > [class*="equal width"].row  {
  display: table;
  table-layout: fixed;
  width: 100% !important;
}
.ui[class*="equal width"].grid > .column:not(.row),
.ui[class*="equal width"].grid > .row > .column,
.ui.grid > [class*="equal width"].row > .column {
  display: table-cell;
}

/* Flexbox (Experimental / Overrides Where Supported) */
.ui[class*="equal width"].grid,
.ui[class*="equal width"].grid > .row,
.ui.grid > [class*="equal width"].row  {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}
.ui[class*="equal width"].grid > .column:not(.row),
.ui[class*="equal width"].grid > .row > .column,
.ui.grid > [class*="equal width"].row > .column {
  display: block;
  flex-grow: 1;
}


/*----------------------
  Equal Height Columns
-----------------------*/

.ui[class*="equal height"].grid {
  display: table;
  table-layout: fixed;
}
.ui[class*="equal height"].grid > .row,
.ui.grid > [class*="equal height"].row  {
  display: table;
  table-layout: fixed;
  width: 100% !important;
}
.ui[class*="equal height"].grid > .column:not(.row),
.ui[class*="equal height"].grid > .row > .column,
.ui.grid > [class*="equal height"].row > .column {
  display: table-cell;
}

/* Flexbox (Experimental / Overrides Where Supported) */
.ui[class*="equal height"].grid,
.ui[class*="equal height"].grid > .row,
.ui.grid > [class*="equal height"].row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}
.ui[class*="equal height"].grid > .column:not(.row),
.ui[class*="equal height"].grid > .row > .column,
.ui.grid > [class*="equal height"].row > .column {
  display: block;
  flex-direction: column;
  flex-grow: 1;
}



/*-------------------
      Doubling
--------------------*/

/* Tablet Only */
@media only screen and (min-width: @tabletBreakpoint) and (max-width: @largestTabletScreen) {
  .ui.doubling.grid {
    width: 100% !important;
  }
  .ui.grid > .doubling.row,
  .ui.doubling.grid > .row {
    margin: 0em !important;
    padding: 0em !important;
  }
  .ui.grid > .doubling.row > .column,
  .ui.doubling.grid > .row > .column {
    display: inline-block !important;
    padding-top: (@rowSpacing / 2) !important;
    padding-bottom: (@rowSpacing / 2) !important;
    margin: 0em;
  }

  .-doublingNumber(@x) when (default()) {
    @i: floor(@x / 2);
  }
  .-doublingNumber(@x) when (@x = 3), (@x = 5) {
    .-doublingNumber(@x + 1);
  }
  
  .forCols(2); .-each(@name, @num) {
    .ui[class*="@{name} column"].doubling.grid > .row > .column,
    .ui[class*="@{name} column"].doubling.grid > .column,
    .ui.grid > [class*="@{name} column"].doubling.row > .column {
      .-doublingNumber(@num);
      .fractionWidth(1, @i) !important;
    }
  }
}

/* Mobily Only */
@media only screen and (max-width: @largestMobileScreen) {
  .ui.grid > .doubling.row,
  .ui.doubling.grid > .row {
    display: block !important;
    margin: 0em !important;
    padding: 0em !important;
  }
  .ui.grid > .doubling.row > .column,
  .ui.doubling.grid > .row > .column {
    display: inline-block !important;
    padding-top: (@rowSpacing / 2) !important;
    padding-bottom: (@rowSpacing / 2) !important;
    margin: 0em !important;
  }

  .-doublingNumber(@x) when (default()) {
    @i: round(0.685 * pow(@x, 0.62));
  }
  .-doublingNumber(@x) when (@x = 3) {
    @i: 2;
  }
  
  .forCols(2); .-each(@name, @num) {
    .ui[class*="@{name} column"].doubling.grid > .row > .column,
    .ui[class*="@{name} column"].doubling.grid > .column,
    .ui.grid > [class*="@{name} column"].doubling.row > .column {
      .-doublingNumber(@num);
      .fractionWidth(1, @i) !important;
    }
  }
}

/*-------------------
      Stackable
--------------------*/

@media only screen and (max-width: @largestMobileScreen) {
  .ui.stackable.grid {
    display: block !important;
    width: auto;
    margin-left: 0em !important;
    margin-right: 0em !important;
    padding: 0em;
  }
  .ui.stackable.grid > .row > .wide.column,
  .ui.stackable.grid > .wide.column,
  .ui.stackable.grid > .column.grid > .column,
  .ui.stackable.grid > .column.row > .column,
  .ui.stackable.grid > .row > .column,
  .ui.stackable.grid > .column:not(.row) {
    display: block !important;
    width: auto !important;
    margin: 0em 0em !important;
    box-shadow: none !important;
    float: none !important;
    padding: (@stackableRowSpacing / 2) (@stackableGutter / 2) !important;
  }
  .ui.stackable.grid > .row {
    display: block !important;
    margin: 0em;
    padding: 0em;
  }

  /* Don't pad inside segment or nested grid */
  .ui.grid .ui.stackable.grid,
  .ui.segment:not(.vertical) .ui.stackable.page.grid {
    margin-left: -(@stackableGutter / 2) !important;
    margin-right: -(@stackableGutter / 2) !important;
  }

  /* Equal Height Stackable */
  .ui[class*="equal height"].stackable.page.grid {
    display: block !important;
  }

  /* Divided Stackable */
  .ui.stackable.divided.grid > .row:first-child > .column:first-child,
  .ui.stackable.celled.grid > .row:first-child > .column:first-child,
  .ui.stackable.divided.grid > .column:not(.row):first-child,
  .ui.stackable.celled.grid > .column:not(.row):first-child {
    border-top: none !important;
  }
  .ui.inverted.stackable.celled.grid > .column:not(.row),
  .ui.inverted.stackable.divided.grid > .column:not(.row),
  .ui.inverted.stackable.celled.grid > .row > .column,
  .ui.inverted.stackable.divided.grid > .row > .column {
    border-top: @stackableInvertedMobileBorder;
  }

  .ui.stackable.celled.grid > .column:not(.row),
  .ui.stackable.divided.grid > .column:not(.row),
  .ui.stackable.celled.grid > .row > .column,
  .ui.stackable.divided.grid > .row > .column {
    border-top: @stackableMobileBorder;
    box-shadow: none !important;
    padding-top: @stackableRowSpacing !important;
    padding-bottom: @stackableRowSpacing !important;
  }

}

/*----------------------
     Only (Device)
-----------------------*/


/* These include arbitrary class repetitions for forced specificity */

/* Mobile Only Hide */
@media only screen and ( max-width: @largestMobileScreen ) {
  .ui.tablet:not(.mobile).only.grid.grid.grid,
  .ui.grid.grid.grid > [class*="tablet only"].row:not(.mobile),
  .ui.grid.grid.grid > [class*="tablet only"].column:not(.mobile),
  .ui.grid.grid.grid > .row > [class*="tablet only"].column:not(.mobile) {
    display: none !important;
  }
  .ui[class*="computer only"].grid.grid.grid:not(.mobile),
  .ui.grid.grid.grid > [class*="computer only"].row:not(.mobile),
  .ui.grid.grid.grid > [class*="computer only"].column:not(.mobile),
  .ui.grid.grid.grid > .row > [class*="computer only"].column:not(.mobile) {
    display: none !important;
  }
}
/* Tablet Only Hide */
@media only screen and (min-width: @tabletBreakpoint ) and (max-width: @largestTabletScreen) {
  .ui[class*="mobile only"].grid.grid.grid:not(.tablet),
  .ui.grid.grid.grid > [class*="mobile only"].row:not(.tablet),
  .ui.grid.grid.grid > [class*="mobile only"].column:not(.tablet),
  .ui.grid.grid.grid > .row > [class*="mobile only"].column:not(.tablet) {
    display: none !important;
  }
  .ui[class*="computer only"].grid.grid.grid:not(.tablet),
  .ui.grid.grid.grid > [class*="computer only"].row:not(.tablet),
  .ui.grid.grid.grid > [class*="computer only"].column:not(.tablet),
  .ui.grid.grid.grid > .row > [class*="computer only"].column:not(.tablet) {
    display: none !important;
  }
}

/* Computer Only Hide */
@media only screen and ( min-width: (@computerBreakpoint) ) {
  .ui[class*="mobile only"].grid.grid.grid:not(.computer),
  .ui.grid.grid.grid > [class*="mobile only"].row:not(.computer),
  .ui.grid.grid.grid > [class*="mobile only"].column:not(.computer),
  .ui.grid.grid.grid > .row > [class*="mobile only"].column:not(.computer) {
    display: none !important;
  }
  .ui[class*="tablet only"].grid.grid.grid:not(.computer),
  .ui.grid.grid.grid > [class*="tablet only"].row:not(.computer),
  .ui.grid.grid.grid > [class*="tablet only"].column:not(.computer),
  .ui.grid.grid.grid > .row > [class*="tablet only"].column:not(.computer) {
    display: none !important;
  }
}

.loadUIOverrides();
